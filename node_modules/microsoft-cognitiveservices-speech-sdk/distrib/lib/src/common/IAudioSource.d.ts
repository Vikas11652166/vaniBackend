import { ISpeechConfigAudioDevice } from "microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js";
import { AudioStreamFormatImpl } from "microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js";
import { AudioSourceEvent } from "microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents.js";
import { EventSource } from "microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js";
import { IDetachable } from "microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IDetachable.js";
import { IStreamChunk } from "microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Stream.js";
export interface IAudioSource {
    id(): string;
    turnOn(): Promise<void>;
    attach(audioNodeId: string): Promise<IAudioStreamNode>;
    detach(audioNodeId: string): void;
    turnOff(): Promise<void>;
    events: EventSource<AudioSourceEvent>;
    format: Promise<AudioStreamFormatImpl>;
    deviceInfo: Promise<ISpeechConfigAudioDevice>;
    setProperty?(name: string, value: string): void;
    getProperty?(name: string, def?: string): string;
}
export interface IAudioStreamNode extends IDetachable {
    id(): string;
    read(): Promise<IStreamChunk<ArrayBuffer>>;
}
